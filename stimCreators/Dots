import math
import random
import Image, ImageDraw

#HELPER FUNCS
def circleArea(radius):
    return math.pi * (radius ** 2)

def circleRadius(area):
    return (area / math.pi) ** 0.5

#make a left/right dot array stimulus from two groups of bounding boxes
def makeStimulus(name, dots1, dots2, size, bgcolor, color):
    image = Image.new("RGB", size, bgcolor)    
    
    draw = ImageDraw.Draw(image)

    for d in dots1:
        draw.ellipse(d[:4], fill = color)

    del draw

    image.save("%s_left.png" % name, "PNG")
    
    image = Image.new("RGB", size, bgcolor)    
    
    draw = ImageDraw.Draw(image)

    for d in dots2:
        draw.ellipse(d[:4], fill = color)

    del draw

    image.save("%s_right.png" % name, "PNG")
    


#solver algo
#1 - calculate average area
#2 - generate a random value which is a portion of that area
#3 - randomly determine to add or subtract that
#4 - perform that operation on the dot
#5 - repeat until only 1 dot is left
#6 - make the last dot the necessary size so the area works out

#DOT SIZE SOLVER
def dotSolver(area, n):
    #input - area, number of dots
    #output - radius of each dot
    avg = area / n
    MIN = 0.25
    MAX = 0.75
    operations = [-1, 1]
    myAreas = []
    for i in range(n-1):
        num = random.uniform(MIN, MAX)
        operation = random.choice(operations)
        myAreas.append(avg + (operation * num * avg))
        
    total = sum(myAreas)
    diff = abs(area - total + avg)
    myAreas.append(avg + diff)
    return myAreas

#dotArranger algo

#1 - place a dot box in a random location which does not overlap the edges
#2 - place a dot in a random location which does not overlap the edges or any other dot boxes
#3 - repeat until no dots are left


def dotArranger(dotAreas, bounds):
    goodList = 0
    while not goodList:
        dotBoxes = []
        count = 1
        for a in dotAreas:
            #print a
            r = int(circleRadius(a))
            d = int(r * 2)
            quit = 0
            reps = 1
            while not quit:
                print "Entering While Loop"
                reps = reps + 1
                
                #if we've tried this 500K times, restart the process...
                if reps > 500000:
                    dotBoxes = []
                    quit = 1

                x = random.uniform(r, bounds[0] - r)
                y = random.uniform(r, bounds[1] - r)
                
                x = int(x) - r
                y = int(y) - r

                dotBox = (x, y, x + d, y + d, r)
                
                #if there are no dots on the screen, place the current dot on the screen
                if count == 1:
                    dotBoxes.append(dotBox)
                    goodList = 1
                    quit = 1
                #otherwise check against the existing list of dots
                else:
                    bad = 0
                    print "Checking through dot list"
                    print dotBoxes
                    for box in dotBoxes:
                        #determine center point and radius of second dot
                        r2 = box[4]
                        
                        x2 = min(box[0], box[2])
                        y2 = min(box[1], box[3])
                        
                        xs = [x, x2]
                        ys = [y, y2]
                        
                        a = max(xs) - min(xs)
                        b = max(ys) - min(ys)
                        
                        c = int((a**2 + b**2) ** 0.5)
                        minC = r + r2
                        print c, minC
                        if c <= minC:
                            bad = 1
                            print "fail"
                            break
                    if not bad:
                        dotBoxes.append(dotBox)
                        goodList = 1
                        quit = 1
            count = count + 1
        print "SUCCESS"
    return dotBoxes
    
#SETTINGS

bgcolor = (0, 0, 0)
color = (255, 255, 255)

box = (480, 640) #region of screen occupied by dots
areas = 0.1 #area of box taken up by dots

ratios = range(5, 16)
seeds = range(2,5)

#info for later
boxArea = box[0] * box[1]
dotArea = areas * boxArea

for n1 in seeds:
    for ratio in ratios:
        ratio = ratio / 20.0
        name = "ratio:%s_seed:%s" % (ratio, n1)
        print name
        n2 = int(n1 / ratio)
        r1 = dotSolver(dotArea, n1)
        r2 = dotSolver(dotArea, n2)
        dots1 = dotArranger(r1, box)
        dots2 = dotArranger(r2, box)
        makeStimulus(name, dots1, dots2, box, bgcolor, color)
        


